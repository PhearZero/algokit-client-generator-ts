/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * @minItems 2
 */
export type StructElement = [FieldName, ABIType];
export type FieldName = string;
export type ABIType = string;
/**
 * Defines a strategy for obtaining a default value for a given ABI arg.
 */
export type DefaultArgument =
  | {
      /**
       * The default value should be fetched by invoking an ABI method
       */
      source: "abi-method";
      data: ContractMethod;
    }
  | {
      /**
       * The default value should be fetched from global state
       */
      source: "global-state";
      /**
       * The key of the state variable
       */
      data: string;
    }
  | {
      /**
       * The default value should be fetched from the local state of the sender user
       */
      source: "local-state";
      /**
       * The key of the state variable
       */
      data: string;
    }
  | {
      /**
       * The default value is a constant.
       */
      source: "constant";
      /**
       * The static default value to use.
       */
      data: string | number;
    };
export type CallConfigValue = "NEVER" | "CALL" | "CREATE" | "ALL";

export interface AlgoAppSpec {
  hints?: {
    [k: string]: Hint;
  };
  source: AppSources;
  contract: AbiContract;
  schema: SchemaSpec;
  state: StateSchemaSpec;
  bare_call_config?: CallConfig;
}
export interface Hint {
  read_only?: boolean;
  structs?: {
    output?: Struct;
    [k: string]: Struct;
  };
  default_arguments?: {
    [k: string]: DefaultArgument;
  };
  call_config?: CallConfig;
}
export interface Struct {
  name: string;
  elements: StructElement[];
}
/**
 * The contract of the ABI method to invoke.
 */
export interface ContractMethod {
  name: string;
  args: ContractMethodArg[];
  desc?: string;
  returns: {
    desc?: string;
    /**
     * Catch all for fixed length arrays and tuples
     */
    type: string;
  };
}
export interface ContractMethodArg {
  desc?: string;
  /**
   * Catch all for fixed length arrays and tuples
   */
  type: string;
  name: string;
}
export interface CallConfig {
  no_op?: CallConfigValue;
  opt_in?: CallConfigValue;
  close_out?: CallConfigValue;
  update_application?: CallConfigValue;
  delete_application?: CallConfigValue;
}
export interface AppSources {
  approval?: string;
  clear?: string;
}
export interface AbiContract {
  name: string;
  methods: ContractMethod1[];
  networks?: {
    [k: string]: {
      appID: number;
    };
  };
}
export interface ContractMethod1 {
  name: string;
  args: ContractMethodArg[];
  desc?: string;
  returns: {
    desc?: string;
    /**
     * Catch all for fixed length arrays and tuples
     */
    type: string;
  };
}
/**
 * The schema for global and local storage
 */
export interface SchemaSpec {
  global?: Schema;
  local?: Schema;
}
export interface Schema {
  declared?: {
    [k: string]: DeclaredSchemaValueSpec;
  };
  reserved?: {
    [k: string]: ReservedSchemaValueSpec;
  };
}
export interface DeclaredSchemaValueSpec {
  /**
   * The type of the value
   */
  type: "uint64" | "bytes";
  /**
   * The name of the key
   */
  key: string;
  /**
   * A description of the variable
   */
  descr?: string;
  /**
   * Whether the value is set statically (at create time only) or dynamically
   */
  static?: boolean;
}
export interface ReservedSchemaValueSpec {
  /**
   * The type of the value
   */
  type: "uint64" | "bytes";
  /**
   * A description of the variable
   */
  descr?: string;
  /**
   * The maximum number of slots to reserve
   */
  max_keys?: number;
  [k: string]: unknown;
}
export interface StateSchemaSpec {
  global: StateSchema;
  local: StateSchema;
}
export interface StateSchema {
  num_uints: number;
  num_byte_slices: number;
}
